---
/**
 * * pricing section table with toggle for monthly or yearly payments
 * This is designed for 3 pricing plans
 */

import Badge from "@components/Badge/Badge.astro";
import Button from "@components/Button/Button.astro";
import { Switch } from "@components/starwind/switch";
import bestValueImage from "@images/best-value.png";
import { getLocaleFromUrl } from "@js/localeUtils";
import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";

interface planInfo {
	name: string; // plan name
	featured?: boolean; // if true, will be highlighted or otherwise featured
	price: {
		monthly: number; // monthly price if paid by month
		yearly: number; // monthly price if paid by year
	};
}
/*
 * feature rows can either be true / false to show if the feature is included in the plan
 * But you can also put a string there to show a custom message
 * ex. if only plan 3 includes this feature, looks like [false, false, true]
 * ex. if plans have different number of users, looks like ["1 user", "Up to 5 users", "Up to 20 users"]
 */
interface featureRow {
	feature: string; // feature name
	plans: (boolean | string)[];
}
// Features are grouped into sections
interface featureGrouping {
	title: string;
	features: featureRow[];
}

interface pricingTable {
	plans: planInfo[];
	featureTable: featureGrouping[];
}

// This is designed for 3 pricing plans
const pricingData: pricingTable = {
	plans: [
		{
			name: "Basic",
			price: {
				monthly: 11,
				yearly: 9,
			},
		},
		{
			name: "Professional",
			featured: true,
			price: {
				monthly: 59,
				yearly: 49,
			},
		},
		{
			name: "Enterprise",
			price: {
				monthly: 119,
				yearly: 99,
			},
		},
	],
	featureTable: [
		{
			title: "Features",
			features: [
				{
					feature: "Integrations",
					plans: [true, true, true],
				},
				{
					feature: "Connect to your database",
					plans: [true, true, true],
				},
				{
					feature: "Import and export data",
					plans: [false, true, true],
				},
				{
					feature: "Team members",
					plans: [false, "Up to 5 users", "Up to 20 users"],
				},
				{
					feature: "Data Storage",
					plans: ["Up to 5 GB", "Up to 50 GB", "Unlimited"],
				},
			],
		},
		{
			title: "Reporting",
			features: [
				{
					feature: "Basic reports",
					plans: [true, true, true],
				},
				{
					feature: "Advanced analytics",
					plans: [false, true, true],
				},
				{
					feature: "Professional reports",
					plans: [false, true, true],
				},
				{
					feature: "Custom reports",
					plans: [false, false, true],
				},
			],
		},
		{
			title: "Support",
			features: [
				{
					feature: "Email support",
					plans: [true, true, true],
				},
				{
					feature: "Priority support",
					plans: [false, true, true],
				},
				{
					feature: "White-glove onboarding",
					plans: [false, false, true],
				},
			],
		},
	],
};

const currLocale = getLocaleFromUrl(Astro.url);
---

<div class="bg-base-950 text-base-100 dark:bg-base-900">
	<!-- always dark mode section -->
	<section id="pricing-table" class="dark py-16 md:py-24">
		<div class="site-container relative">
			<div class="flex justify-center">
				<!-- <Badge>Pricing</Badge> -->
			</div>
			<h2 class="h2 text-center">A plan for every business</h2>

			<!-- Toggle switch for monthly or yearly pricing -->
			<div class="mt-6 flex justify-center">
				<label
					for="pricing-table__toggle"
					class="relative inline-flex cursor-pointer items-center gap-4 select-none"
				>
					<span class="description flex items-center">Monthly</span>
					<Switch id="pricing-table__toggle" variant="primary" padding={4} />
					<span class="description flex items-center">Yearly</span>
				</label>
			</div>

			<!-- This is designed for 3 pricing plans -->
			<div class="mx-auto mt-12 grid w-full grid-cols-3 lg:grid-cols-4">
				<!-- pricing plan top info -->
				<div class="col-span-3 grid gap-3 md:mt-24 md:grid-cols-3 lg:col-start-2 lg:gap-0">
					{
						pricingData.plans.map((plan, planIdx) => (
							// pricing cards
							<div
								class="pricing-plan relative mx-auto h-full w-full max-w-sm rounded-2xl lg:rounded-b-none"
								class:list={[
									{
										"pt-10 md:pt-0": plan.featured === true,
									},
								]}
							>
								<div class="relative h-full lg:pb-0">
									{plan.featured === true && (
										<div>
											<Image
												src={bestValueImage}
												class="absolute -top-32 right-0 z-10 hidden md:block dark:invert"
												alt="best value"
												loading="lazy"
												width={170}
												densities={[1.5, 2]}
											/>
											<div class="from-gradient-1 via-gradient-2 to-gradient-3 absolute -top-10 left-0 w-full rounded-t-xl bg-linear-40">
												<p class="py-2 text-center font-semibold tracking-tight text-white">
													Recommended
												</p>
											</div>
										</div>
									)}
									<div
										class="relative z-10 flex h-full flex-col rounded-b-xl lg:rounded-b-none"
										class:list={[
											{
												"bg-primary-100 dark:bg-base-800": plan.featured === true,
											},
										]}
									>
										<div class="mx-auto flex h-full w-full max-w-[20rem] flex-col px-6 pb-6 text-center">
											<div class="flex w-full justify-center pt-6">
												<h3 class="mb-4 text-xl font-semibold tracking-tight">{plan.name}</h3>
											</div>
											<div class="text-center">
												<p class="mt-3 font-semibold">
													<div class="pricing-monthly">
														<span class="text-xl font-semibold tracking-tight">$</span>
														<span class="font-serif text-6xl tracking-tighter md:text-7xl">
															{plan.price.monthly}
														</span>

														<br />
														<p class="description mb-4 inline-block tracking-tight">
															per user, per month
														</p>
													</div>
													<div class="pricing-yearly hidden">
														<span class="text-xl font-semibold tracking-tight">$</span>
														<span class="font-serif text-6xl tracking-tighter md:text-7xl">
															{plan.price.yearly}
														</span>

														<br />
														<p class="description mb-4 inline-block tracking-tight">
															per user, per month
														</p>
													</div>
												</p>
											</div>

											<ul class="mt-6 flex w-full flex-col gap-2 lg:sr-only">
												{pricingData.featureTable.map((featureGroup) =>
													// features inside cards for mobile views
													featureGroup.features.map(
														(featureRow) =>
															featureRow.plans[planIdx] !== false && (
																<li
																	class:list={[
																		"flex items-start",
																		{
																			"opacity-90": plan.featured !== true,
																		},
																	]}
																>
																	<Icon
																		name="tabler/check"
																		class="text-primary-600 dark:text-primary-400 mt-0.5 size-5 shrink-0"
																		aria-hidden="true"
																	/>
																	<span class="ml-2 inline">
																		{featureRow.feature}
																		<span>
																			{
																				// if the feature row has a string, show it
																				typeof featureRow.plans[planIdx] === "string" && (
																					<span class="text-base-700 dark:text-base-300 ml-1 text-sm">
																						({featureRow.plans[planIdx]})
																					</span>
																				)
																			}
																		</span>
																	</span>
																</li>
															),
													),
												)}
											</ul>
											<div class="mt-auto">
												<Button
													variant={plan.featured === true ? "primary" : "secondary"}
													href={"/signup"}
													class={`mt-4`}
												>
													Get Started
												</Button>
											</div>
										</div>
									</div>
								</div>
							</div>
						))
					}
				</div>

				<!-- feature rows for desktop -->
				<div class="col-span-4 hidden lg:block">
					{
						// loop over feature groups
						pricingData.featureTable.map((featureGroup) => (
							<div>
								<div class="border-base-700 grid grid-cols-4 border-b text-lg">
									<p class="pt-8 pb-4 font-semibold">{featureGroup.title}</p>
									{pricingData.plans.map((plan, planIdx) => (
										<div
											class={`${plan.featured === true ? "bg-primary-100 dark:bg-base-800" : ""}`}
										/>
									))}
								</div>
								{featureGroup.features.map((feature) => (
									// each feature group has feature name, and data for each plan to display in the row
									<div class="border-base-700 grid grid-cols-4 border-b">
										<p class="py-4 opacity-90 dark:opacity-80">{feature.feature}</p>
										{feature.plans.map((plan, planIdx) => (
											<div
												class="flex items-center justify-center py-4"
												class:list={[
													{
														"bg-primary-100 dark:bg-base-800": pricingData.plans[planIdx].featured,
													},
												]}
											>
												{
													// if the feature row has a string, show it
													typeof feature.plans[planIdx] === "string" ? (
														<span
															class={
																pricingData.plans[planIdx].featured === true
																	? ""
																	: "opacity-90 dark:opacity-80"
															}
														>
															{feature.plans[planIdx]}
														</span>
													) : // otherwise show a checkmark if true, or a dash icon if false
													plan === false ? (
														<Icon
															name="tabler/minus"
															class={`size-3 shrink-0 opacity-90 dark:opacity-80`}
															aria-hidden="true"
														/>
													) : (
														<Icon
															name="tabler/check"
															class={`text-primary-600 dark:text-primary-400 size-5 shrink-0 ${
																pricingData.plans[planIdx].featured === true
																	? ""
																	: "opcaity-90 dark:opacity-80"
															}`}
															aria-hidden="true"
														/>
													)
												}
											</div>
										))}
									</div>
								))}
							</div>
						))
					}
				</div>
			</div>
		</div>
	</section>
</div>

<script>
	import type { SwitchChangeEvent } from "@/components/starwind/switch";

	function pricingPlanToggleSetup() {
		const pricingSection = document.getElementById("pricing-table");
		const toggle = pricingSection?.querySelector("#pricing-table__toggle");
		const monthlyPrices = pricingSection?.querySelectorAll(".pricing-monthly");
		const yearlyPrices = pricingSection?.querySelectorAll(".pricing-yearly");

		if (!toggle || !monthlyPrices || !yearlyPrices) return;

		toggle.addEventListener("starwind-switch:change", (e: Event) => {
			const event = e as SwitchChangeEvent;
			const isYearly = event.detail.checked;

			monthlyPrices.forEach((price) => price.classList.toggle("hidden", isYearly));
			yearlyPrices.forEach((price) => price.classList.toggle("hidden", !isYearly));
		});
	}

	// runs on initial page load
	pricingPlanToggleSetup();

	// runs on view transitions navigation
	document.addEventListener("astro:after-swap", pricingPlanToggleSetup);
</script>
